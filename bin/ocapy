#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2013 Pierre-Samuel Le Stang (ps@lestang.fr)
#  
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>. 

import string
import sys
import argparse
import logging

logging.basicConfig(level=logging.INFO, format="%(message)s")
logger = logging.getLogger()

from OCAPy import OCAPy, Config, UserInput, color

parser = argparse.ArgumentParser(prog='ocapy')
parser.add_argument('-c', '--config', action='store_true', help='Configure'
                    ' OCAPy and manage profiles authentication')
parser.add_argument('-s', '--shell', action='store_true', help='Start an' 
                    ' interactive shell')
parser.add_argument('-p', '--profile', default='default', help='Authentication'
                    ' profile to use')
parser.add_argument('-n', '--no-color', action='store_true', help='Disable'
                    ' color, default is to enable unless colorama library is'
                    ' missing ')

args = parser.parse_args()
# Set/Unset terminal color
color(enable=not args.no_color)
# Auth profile name 
profile_name = args.profile

if args.config:
    logger.info("Loading configuration...")
    config = Config()

   
    while ( True ):
        add_profile = False

        if not len(config.profiles):
            logger.info("No profile found, adding one...")
            add_profile = True
        else:
            answer = UserInput(question='Do you want to add, delete, detail or'
                               ' validate a profile?',
                               choices=['add', 'delete', 'detail', 'valid'],
                               default='detail').process()
            names = [ profile.name for profile in config.profiles ]
            if answer == 'detail':
                if profile_name != 'default':
                    answer = profile_name
                elif len(names) > 1: 
                    answer = UserInput(question='Choose the profile to detail:', choices=names,
                                   default=names[0]).process()
                else:
                    answer = names[0]

                profile = config.profile(answer)
                if profile is not None:
                    logger.info(profile)
                else:
                    logger.info('Profile not found!')
            elif answer == 'add':
                add_profile = True
            elif answer == 'valid':
                if profile_name != 'default':
                    answer = profile_name
                elif len(names) > 1: 
                    answer = UserInput(question='Choose the profile to valid:', choices=names,
                                   default=names[0]).process()
                else:
                    answer = names[0]

                profile = config.profile(answer)
                if profile.is_valid():
                    logger.info('Profile "%s" is valid' % profile.name)
                else:
                    logger.error('Pofile "%s" is not valid' % profile.name)
            elif answer == 'delete':
                answer = UserInput(question='Choose the profile to delete:',
                                   choices=names, default=names[0]).process()
                config.delete_profile(answer)
                config.save()
                logger.info('Profile "%s" has been deleted' % answer)
                config = Config()
            else:
                logger.warning('"%s" command is not implemented' % answer)


        if add_profile:
            app_key = UserInput(question='Enter your application key').process()
            app_secret = UserInput(question='Enter your application secret').process()
            consumer_key = UserInput(question='Enter your consumer key').process()
            base_url = UserInput(question='Enter the API base URL').process()
            name = UserInput(question='Give a name to your profile').process()
            config.add_profile(app_key=app_key, app_secret=app_secret,
                               consumer_key=consumer_key, name=name, base_url=base_url)
            config.save()
            logger.info('Configuration saved')

elif args.shell:
    logger.info('Shell is not yet implemented')
    sys.exit(1);
    logger.info('Loading default profile...')
    config = Config()
    ocapy = OCAPy(ocapy=profile_name)
    # Start the shell...
    # print ocapy.me.get()
else:
    parser.print_help()


