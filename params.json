{"name":"Ocapy","tagline":"OCAPy - OVH Client APy","body":"OCAPy\r\n=====\r\n\r\nOVH Client Api (in Python)\r\n\r\nOCAPy is a python client implementing [OVH restful API](https://api.ovh.com/console/) consumption\r\n\r\n## Disclaimer ##\r\n**OVH is in no way involved in the development of this library**, in case of bug please use the issues tracker provided by Github\r\n\r\n## Usage overview\r\n\r\n```python\r\n    # Import the main class\r\n    from OCAPy import OCAPy\r\n    \r\n    # Instantiate OCAPy class\r\n    ocapy=OCAPy(\r\n        base_url='https://api.ovh.com/1.0/',\r\n        app_key='YOUR APPLICATION KEY',\r\n        app_secret='YOUR APPLICATION SECRET',\r\n        consumer_key='YOUR CONSUMER KEY'\r\n    )\r\n\r\n    # And play with the API\r\n    # A GET request: GET https://api.ovh.com/1.0/me\r\n    request=ocapy.me.get()\r\n    \r\n    # print my city\r\n    print request['city']\r\n\r\n    # A GET request with parameters; GET https://api.ovh.com/1.0/ips?type=dedicated\r\n    print ocapy.ip.get(params={'type': 'dedicated'})\r\n\r\n    # Want to get a specific ressource?\r\n    # GET https://api.ovh.com/1.0/ip/213.186.33.99%2F32\r\n    print ocapy.ip('213.186.33.99/32').get()\r\n    \r\n    # OK but I also want to play with POST and PUT!\r\n    # POST https://api.ovh.com/1.0/me/ovhAccount/FR/creditOrder\r\n    print ocapy.me.ovhAccount('FR').creditOrder.post(data={'amount':'1000'})\r\n\r\n    # PUT https://api.ovh.com/1.0/xdsl/xdsl-xxxx-1\r\n    print ocapy.xdsl('xdsl-xxxx-1').put(data={'description':'My XDSL description'})\r\n    \r\n    # And what's about DELETE?\r\n    # DELETE https://api.ovh.com/1.0/sms/user/ocapy\r\n    print ocapy.sms('sms-xxxx-1').user('ocapy').delete()\r\n    \r\n```\r\n\r\n### Basics\r\n1. OVH API is available [here](https://api.ovh.com/console/)\r\n2. To get your credentials follow [this tutorial](http://www.ovh.com/fr/g934.premiers-pas-avec-l-api)\r\n3. The code has been tested with python 2.7\r\n\r\n### Requirements\r\n* The famous [requests > 1.0.0](http://docs.python-requests.org/en/latest/) python library\r\n* To get color in ocapy program install [colorama](https://pypi.python.org/pypi/colorama) python library, **this requirement is NOT mandatory**\r\n* Other libs should be available within your python installation.\r\n\r\n### Installation\r\n1. Download the archive\r\n2. Unzip and go into the directory\r\n3. run ```python setup.py install```\r\n4. Play with it!\r\n\r\nIn other words under Linux:\r\n\r\n```bash\r\nwget https://github.com/pslestang/OCAPy/archive/master.zip\r\nunzip master.zip\r\ncd OCAPy-master/\r\nsudo python setup.py install\r\n```\r\n\r\n### API Responses\r\n- The API responses are **decoded JSON string**\r\n- In case of **NULL** response, **None** is returned\r\n- In case of **HTTP error** which is also an API error, an exception is raised\r\n\r\n```python\r\n# A successfull request return a decoded JSON string\r\nme=ocapy.me.get()\r\nprint \"My name is: %s\" % me['name']\r\n```\r\n    My name is: Le Stang\r\n\r\n```python\r\n# Ex: Adding ocapy user return a NULL response so None in python\r\nprint ocapy.sms('sms-xxxx-1').users.post(data={'login':'ocapy', 'password':'plopplop'})\r\n```    \r\n    None\r\n\r\n```python    \r\n# Ex: Adding ocapy user one more time raise an exception:\"\r\ntry:\r\n    ocapy.sms('sms-xxxx-1').users.post(data={'login':'ocapy', 'password':'plopplop'})\r\nexcept Exception as e:\r\n    print \"Exception raised: %s\" % e\r\n```\r\n    Exception raised: POST https://api.ovh.com/1.0/sms/sms-xxxx-1/users [409]: This login exists already for that account\r\n\r\n```python\r\n# Ex: Deleting ocapy user return a NULL response, so None in python\"\r\nprint ocapy.sms('sms-xxxx-1').users('ocapy').delete()\r\n```\r\n    None\r\n\r\n```python\r\n# Calling an invalid resource, raise an exception:\"\r\ntry:\r\n    ocapy.me.invalidresource.get()\r\nexcept Exception as e:\r\n    print \"Exception raised %s\" % e\r\n\r\n```\r\n     Exception raised GET https://api.ovh.com/1.0/me/invalidresource [404]: Got an invalid (or empty) URL\r\n\r\n### Configuration\r\nStarting from version **0.2.0** OCAPy is able to read authentication parameters from an INI configuration file. This configuration file is stored in the user's home directory and called **.ocapyrc**\r\nThe configuration is compounded of a main configuration part and one or several profiles part.\r\n\r\n**Full exemple:**\r\n\r\n```ini\r\n[ocapy]\r\nbase_url = https://api.ovh.com/1.0/\r\nprofile = full\r\n\r\n[profile-full]\r\nname = full\r\napp_key = 1234AbCD5eFGh6ijk\r\napp_secret = QQkc0c1hqVnRWbmcwY3JtdDFDeFlkYkd\r\nconsumer_key = V2ROTnkwTzllMVJaZU9odDMxQzhxcGFk\r\nbase_url = https://api.ovh.com/1.0\r\n\r\n[profile-domains]\r\nname = domains\r\napp_key = 1234AbCD5eFGh6ijk\r\napp_secret = UemxsTVZKYVpVOW9kRE14UXpoeGNRmsK\r\nconsumer_key = UVlpLWVZwVk9XOWtSRTE0VVhwb2VHTlJ\r\nbase_url = https://api.ovh.com/1.0\r\n```\r\n\r\nTo use the authentication parameters from the configuration file, just set the option ```ocapy_profile='profile name'``` when instantiating the OCAPy class.\r\nYou may use the profile called 'default' to load the profile specified in ```[ocapy]``` section.\r\n\r\nWith the above configuration the following lines are strictly the same:\r\n\r\n```python\r\n# use the profile called full (profile-full)\r\nocapy = OCAPy(ocapy_profile='full')\r\n# use the default profile (value set to full) \r\nocapy = OCAPy(ocapy_profile='default')\r\n\r\n```\r\n\r\n### ocapy program\r\nStarting from version **0.2.0** OCAPy is shipped with a program called ```ocapy``` which is for the moment a helper program that manages the configuration file (add, remove, detail, valid a profile)\r\n\r\nThe 'valid' utility tests that a request on https://api.ovh.com/1.0/me is working with a selected authentication profile \r\n\r\nDuring 'add' process the same request is done. If the test fails the profile is not added.\r\n\r\nHere the help message:\r\n\r\n```\r\nusage: ocapy [-h] [-c] [-s] [-p PROFILE] [-n]\r\n\r\noptional arguments:\r\n  -h, --help            show this help message and exit\r\n  -c, --config          Configure OCAPy and manage profiles authentication\r\n  -s, --shell           Start an interactive shell\r\n  -p PROFILE, --profile PROFILE\r\n                        Authentication profile to use\r\n  -n, --no-color        Disable color, default is to enable unless colorama\r\n                        library is missing\r\n```\r\n\r\n### License\r\nOCAPy is licensed under the terms of the General Public License v3\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}